{"version":3,"sources":["pages/root/RootPage.tsx","pages/sudoku-solver/solver/helper.ts","pages/sudoku-solver/solver/Solve.ts","pages/sudoku-solver/sudoku/EditableItem.tsx","pages/sudoku-solver/sudoku/SudokuPart.tsx","pages/sudoku-solver/sudoku/SudokuRow.tsx","pages/sudoku-solver/sudoku/Sudoku.tsx","pages/sudoku-solver/SudokuPage.tsx","NavigationBar.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["RootPage","findRow","index","Math","floor","findColumn","getPosibleValuesInRow","input","row","getRowPosibleValuesByRow","getPosibleValuesByColumn","col","getColumnPosibleValuesByColumn","getPartPosibleValuesInPart","startIndex","column","getStartIndex","rowTwo","rowThree","filter","v","undefined","endIndex","rowValues","i","value","push","values","solve","length","posibleValues","partPosibleValues","includes","rowPosibleValues","columnPosibleValues","ind","hypotesisValue","hypotesisInput","tempRez","verify","results","val","vals","EditableItem","onValueChanged","React","useState","open","setOpen","Select","labelId","id","onClose","onOpen","onChange","event","target","variant","renderValue","style","fontSize","textAlign","MenuItem","brickStyle","border","height","width","tableStyle","SudokuPart","part","viewOnly","matrix","all","rowOne","toMatrix","rocordMap","Map","map","rowIndex","td","colIndex","pos","get","Sudokurow","sudokuRow","part1","part2","part3","flexDirection","display","Sudoku","SudokuPage","Array","state","setState","setViewOnly","prev","newState","className","onClick","solution","NavigationBar","history","useHistory","App","basename","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.62f54dc7.chunk.js","sourcesContent":["export const RootPage = () => {\n  return <div>\n    <h1>This is a root page</h1>\n    <p>Soo there will be added something more...</p>\n  </div>;\n};\n","import { SudokuInputs } from \"../sudoku/SudokuInputs\";\n\nconst findRow = (index: number): number => {\n  return Math.floor(index / 9);\n};\n\nconst findColumn = (index: number): number => {\n  const rowNumber = findRow(index);\n  const startIndex = rowNumber * 9;\n  return index - startIndex;\n};\n\nconst getStartIndex = (index: number) => {\n  const row = Math.floor(index / 27);\n  const column = findColumn(index);\n  if (column === 8 || column === 7 || column === 6) {\n    return 6 + row * 27;\n  } else if (column === 5 || column === 4 || column === 3) {\n    return 3 + row * 27;\n  } else {\n    return row * 27;\n  }\n};\n\nexport const getPosibleValuesInRow = (input: SudokuInputs, index: number) => {\n  const row = findRow(index);\n  return getRowPosibleValuesByRow(input, row);\n};\n\nexport const getPosibleValuesByColumn = (\n  input: SudokuInputs,\n  index: number\n) => {\n  const col = findColumn(index);\n  return getColumnPosibleValuesByColumn(input, col);\n};\n\nexport const getPartPosibleValuesInPart = (\n  input: SudokuInputs,\n  index: number\n) => {\n  const startIndex = getStartIndex(index);\n\n  const one = input[startIndex];\n  const two = input[startIndex + 1];\n  const three = input[startIndex + 2];\n\n  const rowTwo = startIndex + 9;\n  const four = input[rowTwo];\n  const five = input[rowTwo + 1];\n  const six = input[rowTwo + 2];\n\n  const rowThree = rowTwo + 9;\n  const seven = input[rowThree];\n  const eight = input[rowThree + 1];\n  const nine = input[rowThree + 2];\n\n  return [one, two, three, four, five, six, seven, eight, nine].filter(\n    (v) => v !== undefined\n  );\n};\n\nexport const getRowPosibleValuesByRow = (\n  input: SudokuInputs,\n  row: number\n): number[] => {\n  const startIndex = row * 9;\n  const endIndex = startIndex + 9;\n  const rowValues: number[] = [];\n  for (let i = startIndex; i < endIndex; i++) {\n    const value = input[i];\n    if (value) {\n      rowValues.push(value);\n    }\n  }\n  return rowValues;\n};\n\nexport const getColumnPosibleValuesByColumn = (\n  input: SudokuInputs,\n  column: number\n): number[] => {\n  const values: number[] = [];\n  for (let i = 0; i < 9; i++) {\n    const pos = column + i * 9;\n    const value = input[pos];\n    if (value) {\n      values.push(value);\n    }\n  }\n  return values;\n};\n","import { SudokuInputs } from \"../sudoku/SudokuInputs\";\nimport { getColumnPosibleValuesByColumn, getPartPosibleValuesInPart, getPosibleValuesByColumn, getPosibleValuesInRow, getRowPosibleValuesByRow } from \"./helper\";\n\nexport const solve = (input: SudokuInputs): SudokuInputs => {\n  for (let index = 0; index < input.length; index++) {\n    const value = input[index];\n    if (!value) {\n      let posibleValues = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n      const partPosibleValues = getPartPosibleValuesInPart(input, index);\n      posibleValues = posibleValues.filter(\n        (v) => !partPosibleValues.includes(v)\n      );\n\n      const rowPosibleValues = getPosibleValuesInRow(input, index);\n      posibleValues = posibleValues.filter(\n        (v) => !rowPosibleValues.includes(v)\n      );\n\n      const columnPosibleValues = getPosibleValuesByColumn(input, index);\n      posibleValues = posibleValues.filter(\n        (v) => !columnPosibleValues.includes(v)\n      );\n      for (let ind = 0; ind < posibleValues.length; ind++) {\n        const hypotesisValue = posibleValues[ind];\n        const hypotesisInput = [...input];\n        hypotesisInput[index] = hypotesisValue;\n        const tempRez = solve(hypotesisInput);\n        const tempRezVerified = verify(tempRez);\n        if (tempRezVerified) {\n          return tempRez;\n        }\n      }\n      return input;\n    }\n  }\n\n  return input;\n};\n\nconst verify = (results: SudokuInputs): boolean => {\n  const undefinedResultsExist =\n    results.filter((val) => val === undefined).length === 0;\n  if (!undefinedResultsExist) {\n    return false;\n  }\n\n  for (let row = 0; row < 9; row++) {\n    const vals = getRowPosibleValuesByRow(results, row);\n    const posibleValues = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    const left = posibleValues.filter((v) => !vals.includes(v));\n    if (left.length > 0) {\n      return false;\n    }\n  }\n\n  for (let col = 0; col < 9; col++) {\n    const vals = getColumnPosibleValuesByColumn(results, col);\n    const posibleValues = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    const left = posibleValues.filter((v) => !vals.includes(v));\n    if (left.length > 0) {\n      return false;\n    }\n  }\n  return true;\n};\n","import { MenuItem, Select } from \"@material-ui/core\";\nimport React from \"react\";\n\ninterface EditableItemProps {\n  value: number | undefined;\n  onValueChanged: (value: number | undefined) => void;\n}\n\nexport const EditableItem = ({ value, onValueChanged }: EditableItemProps) => {\n  const [open, setOpen] = React.useState(false);\n\n  const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n    const v = event.target.value as number;\n    if (v) {\n      onValueChanged(v);\n    } else {\n      onValueChanged(undefined);\n    }\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  return (\n    <Select\n      labelId=\"val\"\n      id=\"value\"\n      open={open}\n      onClose={handleClose}\n      onOpen={handleOpen}\n      value={value}\n      onChange={handleChange}\n      variant=\"outlined\"\n      renderValue={(v) => {\n        return (\n          <div\n            style={{\n              fontSize: \"30px\",\n              textAlign: \"center\",\n            }}\n          >\n            {value}\n          </div>\n        );\n      }}\n    >\n      <MenuItem value=\"\">\n        <em>None</em>\n      </MenuItem>\n      <MenuItem value={1}>1</MenuItem>\n      <MenuItem value={2}>2</MenuItem>\n      <MenuItem value={3}>3</MenuItem>\n      <MenuItem value={4}>4</MenuItem>\n      <MenuItem value={5}>5</MenuItem>\n      <MenuItem value={6}>6</MenuItem>\n      <MenuItem value={7}>7</MenuItem>\n      <MenuItem value={8}>8</MenuItem>\n      <MenuItem value={9}>9</MenuItem>\n    </Select>\n  );\n};\n","import { CSSProperties } from \"react\";\nimport { EditableItem } from \"./EditableItem\";\nimport { SudokuInputs } from \"./SudokuInputs\";\n\nconst brickStyle: CSSProperties = {\n  border: \"1px solid black\",\n  height: \"70px\",\n  width: \"70px\",\n  textAlign: \"center\",\n  fontSize: \"30px\",\n};\n\nconst tableStyle: CSSProperties = {\n  border: \"1px solid black\",\n};\n\nconst toMatrix = (all: (number | undefined)[], part: number): Matrix => {\n  const rowOne = part * 3 - 1;\n  const one = all[rowOne + 1];\n  const two = all[rowOne + 2];\n  const three = all[rowOne + 3];\n\n  const rowTwo = rowOne + 6;\n  const four = all[rowTwo + 4];\n  const five = all[rowTwo + 5];\n  const six = all[rowTwo + 6];\n\n  const rowThree = rowTwo + 6;\n  const seven = all[rowThree + 7];\n  const eight = all[rowThree + 8];\n  const nine = all[rowThree + 9];\n\n  return [\n    [one, two, three],\n    [four, five, six],\n    [seven, eight, nine],\n  ];\n};\n\ntype Matrix = (number | undefined)[][];\ninterface SudokuPartProps {\n  values: SudokuInputs;\n  part: number;\n  viewOnly?: boolean;\n  onValueChanged?: (index: number, value: number | undefined) => void;\n}\n\nexport const SudokuPart = ({\n  values,\n  part,\n  viewOnly,\n  onValueChanged,\n}: SudokuPartProps) => {\n  const matrix = toMatrix(values, part);\n  const rowOne = part * 3 - 1;\n  const rowTwo = rowOne + 6;\n  const rowThree = rowTwo + 6;\n\n  const rocordMap = new Map<number, number>([\n    [0, rowOne + 1],\n    [1, rowOne + 2],\n    [2, rowOne + 3],\n\n    [3, rowTwo + 4],\n    [4, rowTwo + 5],\n    [5, rowTwo + 6],\n\n    [6, rowThree + 7],\n    [7, rowThree + 8],\n    [8, rowThree + 9],\n  ]);\n  return (\n    <table style={tableStyle}>\n      <tbody>\n        {matrix.map((row, rowIndex) => {\n          return (\n            <tr key={rowIndex} style={brickStyle}>\n              {row.map((td, colIndex) => {\n                return (\n                  <td key={colIndex} style={brickStyle}>\n                    {viewOnly ? (\n                      td\n                    ) : (\n                      <EditableItem\n                        value={td}\n                        onValueChanged={(value) => {\n                          if (onValueChanged) {\n                            const pos = rowIndex * 3 + colIndex;\n                            const index = rocordMap.get(pos) as number;\n                            onValueChanged(index, value);\n                          }\n                        }}\n                      ></EditableItem>\n                    )}\n                  </td>\n                );\n              })}\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import { SudokuInputs } from \"./SudokuInputs\";\nimport {  SudokuPart } from \"./SudokuPart\";\ninterface SudokurowProps {\n  values: SudokuInputs;\n  sudokuRow: number;\n  viewOnly?: boolean;\n  onValueChanged?: (\n    index: number,\n    value: number | undefined\n  ) => void;\n}\n\nexport const Sudokurow = ({ values, sudokuRow, onValueChanged, viewOnly }: SudokurowProps) => {\n  const part1 = sudokuRow * 9;\n  const part2 = part1 + 1;\n  const part3 = part2 + 1;\n\n  return (\n    <div\n      style={{\n        flexDirection: \"row\",\n        display: \"flex\",\n      }}\n    >\n      <SudokuPart values={values} viewOnly={viewOnly} part={part1} key={part1} onValueChanged={onValueChanged} />\n      <SudokuPart values={values} viewOnly={viewOnly} part={part2} key={part2} onValueChanged={onValueChanged} />\n      <SudokuPart values={values} viewOnly={viewOnly} part={part3} key={part3} onValueChanged={onValueChanged} />\n    </div>\n  );\n};\n","import React from \"react\";\nimport { SudokuInputs } from \"./SudokuInputs\";\nimport { Sudokurow } from \"./SudokuRow\";\n\ninterface SudokuProps {\n  input: SudokuInputs;\n  viewOnly?: boolean;\n  onValueChanged?: (\n    index: number,\n    value: number | undefined\n  ) => void;\n}\n\nexport const Sudoku = ({ input, onValueChanged, viewOnly }: SudokuProps) => {\n  return (\n    <div>\n      <Sudokurow values={input} sudokuRow={0} viewOnly={viewOnly} key={0} onValueChanged={onValueChanged} />\n      <Sudokurow values={input} sudokuRow={1} viewOnly={viewOnly} key={1} onValueChanged={onValueChanged} />\n      <Sudokurow values={input} sudokuRow={2} viewOnly={viewOnly} key={2} onValueChanged={onValueChanged} />\n    </div>\n  );\n};\n","import { useState } from \"react\";\nimport { solve } from \"./solver/Solve\";\nimport { Sudoku } from \"./sudoku/Sudoku\";\nimport \"./SudokuPage.css\";\n\nexport const SudokuPage = () => {\n  const [state, setState] = useState(new Array<number | undefined>(81));\n  const [viewOnly, setViewOnly] = useState(false);\n\n  const solveSudoku = () => {\n    const solution = solve(state);\n    setState(solution);\n    setViewOnly(true);\n  };\n\n  const clearSolution = () => {\n    setState(new Array<number | undefined>(81));\n    setViewOnly(false);\n  };\n\n  return (\n    <div>\n      <Sudoku\n        viewOnly={viewOnly}\n        input={state}\n        onValueChanged={(index, val) => {\n          setState((prev) => {\n            const newState = [...prev];\n            newState[index] = val;\n            return newState;\n          });\n        }}\n      />\n      <button className=\"SudokuButton\" onClick={solveSudoku}>Solve</button>\n      <button className=\"SudokuButton\" onClick={clearSolution}>Clear</button>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport \"./NavigationBar.css\";\n\nexport const NavigationBar = () => {\n  const history = useHistory();\n  return (\n    <table className=\"table\">\n      <thead>\n        <tr>\n          <th className=\"th\" onClick={() => history.push(\"/\")}>\n            Home\n          </th>\n          <th className=\"th\" onClick={() => history.push(\"/sudoku\")}>\n            Sudoku solver\n          </th>\n        </tr>\n      </thead>\n    </table>\n  );\n};\n","import React from \"react\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { RootPage } from \"./pages/root/RootPage\";\nimport { SudokuPage } from \"./pages/sudoku-solver/SudokuPage\";\nimport { NavigationBar } from \"./NavigationBar\";\n\nexport const App = () => {\n  return (\n    <Router basename=\"/\">\n      <div>\n        <NavigationBar />\n        <Switch>\n          <Route exact path=\"/\">\n            <RootPage />\n          </Route>\n          <Route path=\"/sudoku\">\n            <SudokuPage />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}